import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from scipy import stats
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import seaborn as sns
import matplotlib.pyplot as plt


"""–ê–Ω–∞–ª–∏–∑ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ VIF –≤—ã—è–≤–∏–ª —Å–∏–ª—å–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –∏ –æ—Å–∞–¥–∫–∞–º–∏ (VIF > 10). –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥–µ–ª—è—Ö.

–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
"""

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤
df = pd.read_csv('train_no_extreme_outliers.csv')
df['date'] = pd.to_datetime(df['date'])
df['week'] = df['date'].dt.to_period('W').apply(lambda r: r.start_time)

# 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–µ–¥–µ–ª–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—É
all_weeks = sorted(weekly_sales['week'].unique())
split_idx = int(len(all_weeks) * 0.8)
train_weeks = all_weeks[:split_idx]
test_weeks  = all_weeks[split_idx:]

# 2. –î–µ–ª–∏–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º weekly_sales –Ω–∞ train –∏ test –ø–æ –Ω–µ–¥–µ–ª–µ
weekly_train = weekly_sales[weekly_sales['week'].isin(train_weeks)]
weekly_test  = weekly_sales[weekly_sales['week'].isin(test_weeks)]

# 3. –°—Ç—Ä–æ–∏–º pivot-—Ç–∞–±–ª–∏—Ü—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ (–≤—Å–µ train_weeks)
sales_train = weekly_train.pivot(index='item_nbr', columns='week', values='units').reindex(columns=train_weeks, fill_value=0)
sales_test  = weekly_test .pivot(index='item_nbr', columns='week', values='units').reindex(columns=train_weeks, fill_value=0)

# 4. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ train, –∑–∞—Ç–µ–º predict –¥–ª—è test
scaler = StandardScaler()
train_scaled = scaler.fit_transform(sales_train)
test_scaled  = scaler.transform(sales_test)

kmeans = KMeans(n_clusters=10, random_state=42)
train_labels = kmeans.fit_predict(train_scaled)
test_labels  = kmeans.predict(test_scaled)

# 5. –°–æ–±–∏—Ä–∞–µ–º Series item_nbr ‚Üí category –∏ –º–∞–ø–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ df
train_cat = pd.Series(train_labels, index=sales_train.index)
test_cat  = pd.Series(test_labels,  index=sales_test.index)
all_cat   = pd.concat([train_cat, test_cat])

df['category'] = df['item_nbr'].map(all_cat.to_dict())

"""# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–π –º–æ–¥–µ–ª–∏ Lasso –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –ø–æ–≥–æ–¥—É"""

# === 2. VIF-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏
from statsmodels.stats.outliers_influence import variance_inflation_factor
import matplotlib.pyplot as plt
import seaborn as sns

vif_df = df[['avg_temp_c', 'precipitation_mm', 'city_code']].dropna()
vif_data = pd.DataFrame()
vif_data["feature"] = vif_df.columns
vif_data["VIF"] = [variance_inflation_factor(vif_df.values, i) for i in range(vif_df.shape[1])]
print("\nüìä VIF-–∞–Ω–∞–ª–∏–∑ –º—É–ª—å—Ç–∏–∫–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç–∏:")
print(vif_data)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.figure(figsize=(8, 4))
sns.barplot(x="VIF", y="feature", data=vif_data)
plt.title("VIF –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º")
plt.grid(True)
plt.tight_layout()
plt.show()