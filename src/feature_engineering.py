import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from scipy import stats
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import seaborn as sns
import matplotlib.pyplot as plt

"""## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""

df = pd.read_csv('train_with_weather.csv')

# –¢–∏–ø–∏–∑–∞—Ü–∏—è
df['date'] = pd.to_datetime(df['date'])
df['store_nbr'] = df['store_nbr'].astype(int)
df['item_nbr'] = df['item_nbr'].astype(int)
df['city'] = df['city'].astype(str).str.lower().str.strip()

# ===  –ü–†–û–ü–£–°–ö–ò ===
#–≤–æ—Å–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ —É—Å—Ä–µ–¥–Ω—è—è –ø–æ –≥–æ—Ä–æ–¥—É. –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–µ –∏—Å–∫–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö.
df['avg_temp_c'] = df.groupby('city')['avg_temp_c'].transform(lambda x: x.fillna(x.mean()))
df['avg_temp_c'].fillna(df['avg_temp_c'].mean(), inplace=True)

df['precipitation_mm'] = df.groupby('city')['precipitation_mm'].transform(lambda x: x.fillna(x.mean()))
df['precipitation_mm'].fillna(df['precipitation_mm'].mean(), inplace=True)

# === –õ–û–ì–ê–†–ò–§–ú–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–ê–ñ ===
#—É–º–µ–Ω—å—à–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂. –≠—Ç–æ —É–ª—É—á—à–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.
df['log_units'] = np.log1p(df['units'])

# ===  –ö–û–î–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô ===
le_city = LabelEncoder()
df['city_code'] = le_city.fit_transform(df['city'])

le_uid = LabelEncoder()
df['unique_id_code'] = le_uid.fit_transform(df['unique_id'])
# === –í—ã–±—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Z-score ===
#–∑–∞–º–µ–Ω—è–µ–º –æ—Ç–∫–ª–æ–Ω—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–¥–∏–∞–Ω–∞–º–∏ –ø–æ –ø–∞—Ä–µ –º–∞–≥–∞–∑–∏–Ω + —Ç–æ–≤–∞—Ä. –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –≤—ã–±–æ—Ä–∫–∏ –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.
numeric_cols = ['units', 'avg_temp_c', 'precipitation_mm', 'log_units']
z_scores = np.abs(stats.zscore(df[numeric_cols]))
df['outlier'] = (z_scores > 3).any(axis=1)

# === –°–∫–æ–ª—å–∫–æ –≤—ã–±—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ ===
total_rows = len(df)
total_outliers = df['outlier'].sum()
print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤: {total_outliers}")
print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–±—Ä–æ—Å–æ–≤: {100 * total_outliers / total_rows:.2f}%")

# === –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º ===
import matplotlib.pyplot as plt
import seaborn as sns

numeric_cols = ['units', 'avg_temp_c', 'precipitation_mm', 'log_units']
outliers_df = df[df['outlier'] == True]

for col in numeric_cols:
    plt.figure(figsize=(8, 4))
    sns.boxplot(data=df, x='outlier', y=col)
    plt.title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "{col}" —Å –≤—ã–±—Ä–æ—Å–∞–º–∏')
    plt.show()

# === –ü—Ä–∏–º–µ—Ä—ã –≤—ã–±—Ä–æ—Å–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ units, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –æ—Å–∞–¥–∫–æ–≤ ===
print("\nüîç –¢–û–ü 10 –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ units:")
print(outliers_df.sort_values('units', ascending=False)[['date', 'store_nbr', 'item_nbr', 'units', 'avg_temp_c', 'precipitation_mm']].head(10))

print("\nüîç –¢–û–ü 10 –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ:")
print(outliers_df.sort_values('avg_temp_c', ascending=False)[['date', 'store_nbr', 'item_nbr', 'units', 'avg_temp_c', 'precipitation_mm']].head(10))

print("\nüîç –¢–û–ü 10 –ø–æ –æ—Å–∞–¥–∫–∞–º:")
print(outliers_df.sort_values('precipitation_mm', ascending=False)[['date', 'store_nbr', 'item_nbr', 'units', 'avg_temp_c', 'precipitation_mm']].head(10))

"""–°–Ω–∞—á–∞–ª–∞ –º—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º (–±–æ–ª–µ–µ 1000 –µ–¥–∏–Ω–∏—Ü –≤ –¥–µ–Ω—å), —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–∏–∫–æ–≤. –î–∞–ª–µ–µ –≤—ã–±—Ä–æ—Å—ã, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Z-–æ—Ü–µ–Ω–∫—É (>3), –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –º–µ–¥–∏–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É –∏ –º–∞–≥–∞–∑–∏–Ω—É. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏–ª–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–Ω–∏–∑–∏—Ç—å –∏—Å–∫–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏."""

# –£–¥–∞–ª–∏–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, > 1000 –ø—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å)
#–∑–∞–º–µ–Ω—è–µ–º –æ—Ç–∫–ª–æ–Ω—è—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–¥–∏–∞–Ω–∞–º–∏ –ø–æ –ø–∞—Ä–µ –º–∞–≥–∞–∑–∏–Ω + —Ç–æ–≤–∞—Ä. –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –≤—ã–±–æ—Ä–∫–∏ –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.
df_cleaned = df[df['units'] <= 1000].copy()

#–ó–∞–º–µ–Ω–∏–º –º–µ–Ω–µ–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–æ—Å—ã (–ø–æ Z-–æ—Ü–µ–Ω–∫–µ) –º–µ–¥–∏–∞–Ω–æ–π –ø–æ store + item
from scipy import stats

z_scores_units = np.abs(stats.zscore(df_cleaned['units']))
df_cleaned['units_z'] = z_scores_units

# –û–±–Ω–∞—Ä—É–∂–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—ã–±—Ä–æ—Å—ã –ø–æ Z
unit_outliers_mask = df_cleaned['units_z'] > 3

# –†–∞—Å—Å—á–∏—Ç–∞–µ–º –º–µ–¥–∏–∞–Ω—ã
median_map = df_cleaned.groupby(['store_nbr', 'item_nbr'])['units'].median()

# –ó–∞–º–µ–Ω–∏–º –≤—ã–±—Ä–æ—Å—ã –º–µ–¥–∏–∞–Ω–∞–º–∏
def replace_with_median(row):
    if row['units_z'] > 3:
        return median_map.get((row['store_nbr'], row['item_nbr']), row['units'])
    return row['units']

df_cleaned['units'] = df_cleaned.apply(replace_with_median, axis=1)
df_cleaned.drop(columns=['units_z'], inplace=True)

# –û–±–Ω–æ–≤–∏–º log_units
df_cleaned['log_units'] = np.log1p(df_cleaned['units'])

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
df_cleaned.to_csv('train_no_extreme_outliers.csv', index=False)
